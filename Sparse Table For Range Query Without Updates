// Sparse Table 
// Use For Range Operation without updates 
// Efficient for idempotent operations like min, max, gcd,&,|
// Time Complexity for pre-computation: O(n log n)
// Time Complexity for query: O(log n)

class MinSparseTable
{
    int n;
    vector<int> logs;
    vector<int> arr;
    vector<vector < int>> table;
    public:
        MinSparseTable(vector<int> a)
        {
            n = a.size();
            arr.resize(n);
            for (int i = 0; i < a.size(); i++)
                arr[i] = a[i];
            int maxPowerOfTwo = max(1, static_cast<int> (ceil(log2(n))));
            logs.resize(n + 1);
            computeLogs();
            table.resize(maxPowerOfTwo + 1, vector<int> (n));
            for (int i = 0; i <= logs[n]; i++)
            {
                int curLen = 1 << i;
                for (int j = 0; j <= n - curLen; j++)
                {
                    if (curLen == 1)
                        table[i][j] = arr[j];
                    else
                        table[i][j] = min(table[i - 1][j], table[i - 1][j + (curLen / 2)]);
                }
            }
        }

    void computeLogs()
    {
        for (int i = 2; i <= n; i++)
            logs[i] = logs[i / 2] + 1;
    }

    int getMinimum(int left, int right)
    {
        int p = logs[right - left + 1];
        int pLen = 1 << p;
        return min(table[p][left], table[p][right - pLen + 1]);
    }
};

class MaxSparseTable
{
    int n;
    vector<int> logs;
    vector<int> arr;
    vector<vector < int>> table;
    public:
        MaxSparseTable(vector<int> a)
        {
            n = a.size();
            arr.resize(n);
            for (int i = 0; i < a.size(); i++)
                arr[i] = a[i];
            int maxPowerOfTwo = max(1, static_cast<int> (ceil(log2(n))));
            logs.resize(n + 1);
            computeLogs();
            table.resize(maxPowerOfTwo + 1, vector<int> (n));
            for (int i = 0; i <= logs[n]; i++)
            {
                int curLen = 1 << i;
                for (int j = 0; j <= n - curLen; j++)
                {
                    if (curLen == 1)
                        table[i][j] = arr[j];
                    else
                        table[i][j] = max(table[i - 1][j], table[i - 1][j + (curLen / 2)]);
                }
            }
        }

    void computeLogs()
    {
        for (int i = 2; i <= n; i++)
            logs[i] = logs[i / 2] + 1;
    }

    int getMaximum(int left, int right)
    {
        int p = logs[right - left + 1];
        int pLen = 1 << p;
        return max(table[p][left], table[p][right - pLen + 1]);
    }
};
