class DSU
{
    public:
        vector<int> parent, rank;

    DSU(int n)
    {
        parent.resize(n);
        rank.resize(n, 0);

        for (int i = 0; i < n; i++)
            parent[i] = i;
    }

    int find(int x)
    {
        return parent[x] = (parent[x] == x) ? x : find(parent[x]);
    }

    bool union(int x, int y)
    {
        int xParent = find(x), yParent = find(y);

        if (xParent != yParent)
        {
            (rank(xParent) < rank(yParent)) ? parent[xParent] = yParent: parent[yParent] = xParent;

            (rank(xParent) += (rank(xParent) < rank(yParent));

                return 1;
            }
            return 0;
        }
    }
};
