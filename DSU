class DSU
{
    public:
        vector<int> parent, rank;

    DSU(int n)
    {
        parent.resize(n);
        rank.resize(n, 0);

        for (int i = 0; i < n; i++)
            parent[i] = i;
    }

    int find(int x)
    {
        return parent[x] = (parent[x] == x) ? x : find(parent[x]);
    }

    bool Union(int x, int y) {
        int xset = find(x), yset = find(y);
        if (xset != yset) {
            rank[xset] < rank[yset] ? parent[xset] = yset : parent[yset] = xset;
            rank[xset] += rank[xset] == rank[yset];
            return true;
        }
        return false;
    }
};
