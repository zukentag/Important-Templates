//  most optimised way of implementing disjoint sets
//  Count Stores number of graphs formed
//  unionfind(int n) initialezes rank and root vector with size n
//  void unionset(int x, int y) makes oa union of x and y
//  int find(int x) finds the rank of x

class unionfind{     
    public: 
    int count; 
    vector <int> root;
    vector <int> rank;
    
    unionfind(int n){
        count = n;
        root = vector <int> (n);
        rank = vector <int> (n);
        
        for(int i=0; i<n; i++){
            root[i]=i;
            rank[i]=1;
        }
    }
    
    void unionset(int x, int y){        
        int rootx=find(x), rooty=find(y);
        if(rootx!=rooty){
            if(rank[rootx]>rank[rooty])
                root[rooty]=rootx;
            else if(rank[rooty]>rank[rootx])
                root[rootx]=rooty;
            else{
                root[rooty]=rootx;
                rank[rootx]++;
            }
            count--;
        }
    }
    
    int find(int x){
        if(x==root[x])
            return root[x];
        return root[x]=find(root[x]);
    }
};
